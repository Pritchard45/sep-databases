NOTE: Real world examples must be your own and not based on the text or previous assignments.

1) How do you find related data that is held in two separate data tables?

      Combine tables with the JOIN clause.

2) Explain, in your own words, the difference between a CROSS JOIN, INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, and FULL OUTER JOIN.
  Give a real world example for each.

  Using the scenario of a Footlocker. Specific models vs Specific Brand tables.

  CROSS JOIN returns the all combinations between tables.

    SELECT *
    FROM model
    CROSS JOIN brand;

  INNER JOIN returns matching combinations using a shared key.

    SELECT model.name, brand.name
    FROM model
    JOIN brand
    ON model.brand_id = brand.id;

  LEFT OUTER JOIN returns NULL values for the unmatched right side rows.

    SELECT brand.name, model.name
    FROM brand
    LEFT OUTER JOIN model
    ON model.brand_id = brand.id;

  RIGHT OUTER JOIN returns NULL values for the unmatched left side rows.

    SELECT model.name, brand.name
    FROM brand
    RIGHT OUTER JOIN model
    ON model.brand_id = brand.id;

  FULL OUTER JOIN returns NULL values for any unmatched row.

    SELECT model.name, brand.name
    FROM brand
    FULL OUTER JOIN model
    ON model.brand_id = brand.id;

3) Define primary key and foreign key. Give a real world example for each.

    Using the same type of example. A primary key is the brand id # of adidas in the store. It defines each row in the stores table of brands.
    The foreign key is equal to the primary key in the models table.

    Brand table primary key = brand_id
    Model table foreign key = brand_id to find all models associated with the brand

4) Define aliasing.

    Simpler way to define table names. brand can be aliased as B or b.

5) Change this query so that you are using aliasing:

  SELECT professor.name, compensation.salary, compensation.vacation_days FROM professor
  JOIN compensation
  ON professor.id = compensation.professor_id;

  SELECT p.name, c.salary, c.vacation_days
  FROM professor AS p
  JOIN compensation AS c
  ON c.professor_id = p.id;

6) Why would you use a NATURAL JOIN? Give a real world example.

    You would use NATURAL JOIN to implicitly join tables based on shared columns.
    It is shorthand form of USING and returns all of the columns that appear in both tables.



    SELECT *
    FROM adidas
    NATURAL JOIN nike;

    output: brand_id, brand_name, model_id, model_name, amount, amount_in_stock, release_date

7) Using this Employee schema and data, write queries to find the following information:
   All employees with their shifts if they have any. Also include any unscheduled shifts.

       SELECT *
       FROM shifts
       FULL OUTER JOIN scheduled_shifts
       ON scheduled_shifts.shift_id = shifts.id
       FULL OUTER JOIN employees
       ON scheduled_shifts.employee_id = employees.id
       ORDER BY scheduled_shifts.employee_id;

    | id  | date       | start_time | end_time | employee_id | shift_id | id  | name               |
    | --- | ---------- | ---------- | -------- | ----------- | -------- | --- | ------------------ |
    | 2   | 1998-03-09 | 08:00:00   | 16:00:00 | 1           | 2        | 1   | Hermione Granger   |
    | 7   | 1998-03-10 | 08:00:00   | 16:00:00 | 1           | 7        | 1   | Hermione Granger   |
    | 12  | 1998-03-11 | 08:00:00   | 16:00:00 | 1           | 12       | 1   | Hermione Granger   |
    | 17  | 1998-03-12 | 08:00:00   | 16:00:00 | 1           | 17       | 1   | Hermione Granger   |
    | 22  | 1998-03-13 | 08:00:00   | 16:00:00 | 1           | 22       | 1   | Hermione Granger   |
    | 8   | 1998-03-10 | 12:00:00   | 16:00:00 | 2           | 8        | 2   | Ronald Weasley     |
    | 18  | 1998-03-12 | 12:00:00   | 16:00:00 | 2           | 18       | 2   | Ronald Weasley     |
    | 3   | 1998-03-09 | 12:00:00   | 16:00:00 | 3           | 3        | 3   | Luna Lovegood      |
    | 13  | 1998-03-11 | 12:00:00   | 16:00:00 | 3           | 13       | 3   | Luna Lovegood      |
    | 23  | 1998-03-13 | 12:00:00   | 16:00:00 | 3           | 23       | 3   | Luna Lovegood      |
    | 15  | 1998-03-11 | 16:00:00   | 20:00:00 | 4           | 15       | 4   | Draco Malfoy       |
    | 20  | 1998-03-12 | 16:00:00   | 20:00:00 | 4           | 20       | 4   | Draco Malfoy       |
    | 25  | 1998-03-13 | 16:00:00   | 20:00:00 | 4           | 25       | 4   | Draco Malfoy       |
    | 4   | 1998-03-09 | 12:00:00   | 20:00:00 | 5           | 4        | 5   | Padma Patil        |
    | 9   | 1998-03-10 | 12:00:00   | 20:00:00 | 5           | 9        | 5   | Padma Patil        |
    | 14  | 1998-03-11 | 12:00:00   | 20:00:00 | 5           | 14       | 5   | Padma Patil        |
    | 1   | 1998-03-09 | 08:00:00   | 12:00:00 | 5           | 1        | 5   | Padma Patil        |
    | 6   | 1998-03-10 | 08:00:00   | 12:00:00 | 5           | 6        | 5   | Padma Patil        |
    | 11  | 1998-03-11 | 08:00:00   | 12:00:00 | 5           | 11       | 5   | Padma Patil        |
    | 19  | 1998-03-12 | 12:00:00   | 20:00:00 | 8           | 19       | 8   | Cho Chang          |
    | 24  | 1998-03-13 | 12:00:00   | 20:00:00 | 8           | 24       | 8   | Cho Chang          |
    | 5   | 1998-03-09 | 16:00:00   | 20:00:00 | 9           | 5        | 9   | Dean Thomas        |
    | 10  | 1998-03-10 | 16:00:00   | 20:00:00 | 9           | 10       | 9   | Dean Thomas        |
    | 21  | 1998-03-13 | 08:00:00   | 12:00:00 |             |          |     |                    |
    | 16  | 1998-03-12 | 08:00:00   | 12:00:00 |             |          |     |                    |
    |     |            |            |          |             |          | 6   | Neville Longbottom |
    |     |            |            |          |             |          | 7   | Cedric Diggory     |

    ---
8) Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

   a) All volunteers. If the volunteer is fostering a dog, include each dog as well.

        SELECT *
        FROM volunteers AS v
        LEFT OUTER JOIN dogs AS d
        ON v.foster_dog_id = d.id
        ORDER BY v.id;

    | id  | first_name | last_name  | address                    | phone_number | available_to_foster | foster_dog_id | id    | name      | gender | age | weight | breed              | intake_date              | in_foster |
    | --- | ---------- | ---------- | -------------------------- | ------------ | ------------------- | ------------- | ----- | --------- | ------ | --- | ------ | ------------------ | ------------------------ | --------- |
    | 1   | Albus      | Dumbledore | 99 Godric's Hollow         | 843-746-3649 | false               |               |       |           |        |     |        |                    |                          |           |
    | 2   | Rubeus     | Hagrid     | 1 Edge of Forbidden Forest | 256-667-2378 | true                | 10002         | 10002 | Munchkin  | F      | 0   | 8      | dachsund chihuahua | 2017-01-13T00:00:00.000Z |           |
    | 3   | Remus      | Lupin      | 12 Grimmauld Place         | 627-283-3771 | true                |               |       |           |        |     |        |                    |                          |           |
    | 4   | Sirius     | Black      | 12 Grimmauld Place         | 878-666-4663 | true                |               |       |           |        |     |        |                    |                          |           |
    | 5   | Marjorie   | Dursley    | 1990 Next Door to Fubster  | 463-528-2253 | true                | 10006         | 10006 | Marmaduke | M      | 7   | 150    | great dane         | 2016-03-22T00:00:00.000Z |           |


    b) The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the "Happy Tail"
       social media promotion which posts recent successful adoptions.

        SELECT 	a.first_name, a.last_name, ca.date, c.name
        FROM cat_adoptions AS ca
        JOIN cats AS c
        ON c.id = ca.cat_id
        JOIN adopters AS a
        ON a.id = ca.adopter_id
        WHERE ca.date > CURRENT_DATE - INTERVAL '30 DAYS';

    | first_name | last_name | date                     | name     |
    | ---------- | --------- | ------------------------ | -------- |
    | Arabella   | Figg      | 2019-09-18T00:00:00.000Z | Mushi    |
    | Argus      | Filch     | 2019-09-23T00:00:00.000Z | Victoire |

    c) Adopters who have not yet chosen a dog to adopt and generate all possible combinations of adopters and available dogs.

      SELECT 	adopters.id AS adopter_id, adopters.first_name, adopters.last_name, dogs.id AS dogs_id, dogs.name AS dogs_name
      FROM adopters
      FULL OUTER JOIN dog_adoptions
      ON dog_adoptions.adopter_id = adopters.id
      CROSS JOIN dogs
      WHERE dog_adoptions.adopter_id IS NULL AND dogs.id NOT IN (
            SELECT dog_adoptions.dog_id
            FROM dog_adoptions)
      ORDER BY adopters.id, dogs.id;

    | adopter_id | first_name | last_name | dogs_id | dogs_name |
    | ---------- | ---------- | --------- | ------- | --------- |
    | 1          | Hermione   | Granger   | 10001   | Boujee    |
    | 1          | Hermione   | Granger   | 10002   | Munchkin  |
    | 1          | Hermione   | Granger   | 10003   | Lassie    |
    | 1          | Hermione   | Granger   | 10004   | Marley    |
    | 1          | Hermione   | Granger   | 10006   | Marmaduke |
    | 2          | Arabella   | Figg      | 10001   | Boujee    |
    | 2          | Arabella   | Figg      | 10002   | Munchkin  |
    | 2          | Arabella   | Figg      | 10003   | Lassie    |
    | 2          | Arabella   | Figg      | 10004   | Marley    |
    | 2          | Arabella   | Figg      | 10006   | Marmaduke |



    d) Lists of all cats and all dogs who have not been adopted.


      **Query #1**

          SELECT 	cats.id AS cat_id, cats.name AS cat_name, cat_adoptions.adopter_id
          FROM cats
          LEFT OUTER JOIN cat_adoptions
          ON cats.id = cat_adoptions.cat_id
          WHERE cat_adoptions.adopter_id IS NULL;

      | cat_id | cat_name | adopter_id |
      | ------ | -------- | ---------- |
      | 2      | Seashell |   null     |
      | 5      | Nala     |   null     |

      ---
      **Query #2**

          SELECT 	dogs.id AS dog_id, dogs.name AS dog_name, dog_adoptions.adopter_id
          FROM dogs
          LEFT OUTER JOIN dog_adoptions
          ON dogs.id = dog_adoptions.dog_id
          WHERE dog_adoptions.adopter_id IS NULL;

      | dog_id | dog_name  | adopter_id |
      | ------ | --------- | ---------- |
      | 10002  | Munchkin  |    null    |
      | 10001  | Boujee    |    null    |
      | 10003  | Lassie    |    null    |
      | 10004  | Marley    |    null    |
      | 10006  | Marmaduke |    null    |

    e) Volunteers who are available to foster. If they currently are fostering a dog, include the dog.
       Also include all dogs who are not currently in foster homes.

          SELECT 	v.id AS volunteer_id, v.first_name, , v.last_name, , v.available_to_foster, , v.foster_dog_id, , d.name AS dog_name
          FROM volunteers AS v
          FULL OUTER JOIN dogs AS d
          ON d.id = v.foster_dog_id
          WHERE v.available_to_foster IS true OR d.id IS NOT NULL
          ORDER BY 1;

      | volunteer_id | first_name | last_name | available_to_foster | foster_dog_id | dog_name  |
      | ------------ | ---------- | --------- | ------------------- | ------------- | --------- |
      | 2            | Rubeus     | Hagrid    | true                | 10002         | Munchkin  |
      | 3            | Remus      | Lupin     | true                |               |           |
      | 4            | Sirius     | Black     | true                |               |           |
      | 5            | Marjorie   | Dursley   | true                | 10006         | Marmaduke |
      |              |            |           |                     |               | Boujee    |
      |              |            |           |                     |               | Rosco     |
      |              |            |           |                     |               | Lassie    |
      |              |            |           |                     |               | Marley    |

    f) The name of the person who adopted Rosco.

        SELECT 	adopter_id, adopters.first_name, adopters.last_name, dogs.name AS dog_name
        FROM dog_adoptions
        JOIN adopters
        ON adopters.id = dog_adoptions.adopter_id
        JOIN dogs
        ON dogs.id = dog_adoptions.dog_id
        WHERE dogs.name = 'Rosco';

      | adopter_id | first_name | last_name | dog_name |
      | ---------- | ---------- | --------- | -------- |
      | 3          | Argus      | Filch     | Rosco    |


9) Using this Library schema and data, write queries applying the following scenarios:

    a) To determine if the library should buy more copies of a given book, please provide the names and position,
       in order, of all of the patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

 **Query #1**

       SELECT patrons.name, holds.rank, books.title
       FROM holds
       LEFT OUTER JOIN patrons
       ON patrons.id = holds.patron_id
       LEFT OUTER JOIN books
       ON books.isbn = holds.isbn
       WHERE books.title = 'Advanced Potion-Making'
       ORDER BY 2;

   | name           | rank | title                  |
   | -------------- | ---- | ---------------------- |
   | Terry Boot     | 1    | Advanced Potion-Making |
   | Cedric Diggory | 2    | Advanced Potion-Making |

    b) Make a list of all book titles and denote whether or not a copy of that book is checked out.

    **Query #1**

        SELECT books.title, transactions.checked_out_date, transactions.checked_in_date
        FROM books
        JOIN transactions
        ON transactions.isbn = books.isbn
        ORDER BY 1, 2;

    | title                                   | checked_out_date         | checked_in_date          |
    | --------------------------------------- | ------------------------ | ------------------------ |
    | Advanced Potion-Making                  | 2013-10-08T00:00:00.000Z | 2013-10-09T00:00:00.000Z |
    | Advanced Potion-Making                  | 2019-10-06T00:00:00.000Z |                          |
    | Fantastic Beasts and Where to Find Them | 2013-10-08T00:00:00.000Z | 2013-10-09T00:00:00.000Z |
    | Fantastic Beasts and Where to Find Them | 2019-10-02T00:00:00.000Z | 2019-10-05T00:00:00.000Z |
    | Fantastic Beasts and Where to Find Them | 2019-10-06T00:00:00.000Z | 2019-10-08T00:00:00.000Z |
    | Fantastic Beasts and Where to Find Them | 2019-10-08T00:00:00.000Z |                          |
    | Hogwarts: A History                     | 2013-10-08T00:00:00.000Z | 2013-10-09T00:00:00.000Z |

    ---


    c) In an effort to learn which books take longer to read, the librarians would like you to create a
       list of average checked out time by book name in the past month.

    **Query #1**

        SELECT books.title, AVG(transactions.checked_in_date - transactions.checked_out_date)
        FROM books
        LEFT OUTER JOIN transactions
        ON transactions.isbn = books.isbn
        WHERE transactions.checked_out_Date > CURRENT_DATE - INTERVAL '30 DAYS' AND transactions.checked_in_date IS NOT NULL
        GROUP BY books.title;

    | title                                   | avg                |
    | --------------------------------------- | ------------------ |
    | Fantastic Beasts and Where to Find Them | 2.5000000000000000 |

    ---




    d) In order to learn which items should be retired, make a list of all books that have not been checked out in the past 5 years.


      **Query #1**

          SELECT 	books.title, transactions.checked_out_date
          FROM books
          LEFT OUTER JOIN transactions
          ON transactions.isbn = books.isbn
          GROUP BY books.title, books.isbn, transactions.checked_out_date
          HAVING transactions.checked_out_date < CURRENT_DATE - INTERVAL '5 YEARS';

      | title                                   | checked_out_date         |
      | --------------------------------------- | ------------------------ |
      | Advanced Potion-Making                  | 2013-10-08T00:00:00.000Z |
      | Hogwarts: A History                     | 2013-10-08T00:00:00.000Z |
      | Fantastic Beasts and Where to Find Them | 2013-10-08T00:00:00.000Z |


    e) List all of the library patrons. If they have one or more books checked out, correspond the books to the patrons.

**Query #1**

        SELECT 	p.id, p.name, t.isbn, b.title, t.checked_out_date, t.checked_in_date
        FROM patrons AS p
        RIGHT OUTER JOIN transactions AS t
        ON p.id = t.patron_id
        RIGHT OUTER JOIN books AS b
        ON b.isbn = t.isbn
        ORDER BY p.id;

    | id  | name             | isbn       | title                                   | checked_out_date         | checked_in_date          |
    | --- | ---------------- | ---------- | --------------------------------------- | ------------------------ | ------------------------ |
    | 1   | Hermione Granger | 3458400871 | Fantastic Beasts and Where to Find Them | 2019-10-06T00:00:00.000Z | 2019-10-08T00:00:00.000Z |
    | 1   | Hermione Granger | 1840918626 | Hogwarts: A History                     | 2013-10-08T00:00:00.000Z | 2013-10-09T00:00:00.000Z |
    | 2   | Terry Boot       | 9136884926 | Advanced Potion-Making                  | 2019-10-06T00:00:00.000Z |                          |
    | 2   | Terry Boot       | 3458400871 | Fantastic Beasts and Where to Find Them | 2013-10-08T00:00:00.000Z | 2013-10-09T00:00:00.000Z |
    | 3   | Padma Patil      | 3458400871 | Fantastic Beasts and Where to Find Them | 2019-10-02T00:00:00.000Z | 2019-10-05T00:00:00.000Z |
    | 4   | Cho Chang        | 9136884926 | Advanced Potion-Making                  | 2013-10-08T00:00:00.000Z | 2013-10-09T00:00:00.000Z |
    | 5   | Cedric Diggory   | 3458400871 | Fantastic Beasts and Where to Find Them | 2019-10-08T00:00:00.000Z |                          |

    ---
