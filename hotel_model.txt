

1) Create a database for the model we built in the example. Create a SQL file that creates the tables and inserts sample data (the questions below will help you create the data). Submit queries to find the following information and include the results:

    CREATE TABLE guests (
      "id"            SERIAL PRIMARY KEY,
      "first_name"    VARCHAR(16),
      "last_name"     VARCHAR(16),
      "address"       VARCHAR(64),
      "phone_number"  VARCHAR(16),
      "email"         VARCHAR(25)
    );

    CREATE TABLE rooms (
      "room"          INTEGER,
      "floor"         INTEGER,
      "rate"          DECIMAL(13, 4)
    );

    CREATE TABLE bookings (
      "id"			      INTEGER NOT NULL,
      "guest_id"      INTEGER REFERENCES guests(id),
      "room"          INTEGER,
      "check_in"      DATE,
      "check_out"     DATE,
      PRIMARY KEY (id,guest_id)
    );


    INSERT INTO guests ("id", "first_name", "last_name", "address", "phone_number", "email")

    VALUES
    (002001, 'Sarah', 'State', '200 Lake Place, Wynnewood, PA 19096', '444-445-4456', 'sarah@lakeplace.com'),
    (002002, 'Marty', 'Mansions', '1 Broadway Street, New Haven, CT 06510', '445-456-4567', 'martin@showtime.com'),
    (002003, 'Asher', 'Advocate', '234 Blue State Ave, Wooster, MA 05123', '499-343-6534', 'avacado@toast.com'),
    (002004, 'Hungry', 'Harry', '789 Bacon Egg Circle, Trenton, NJ 90032', '123-456-7890', 'nameis@nojoke.com'),
    (002005, 'Julio', 'Jones', 'Matt Ryan Drive, Atlanta, GA 43843', '123-412-3432', 'falcons@joke.com');

    INSERT INTO rooms("room", "floor", "rate")

    VALUES
    (101, 2, 169.99),
    (102, 2, 169.99),
    (103, 2, 189.99),
    (104, 2, 189.99),
    (105, 2, 299.99),
    (201, 3, 189.99),
    (202, 3, 299.99),
    (203, 3, 299.99),
    (204, 3, 299.99),
    (205, 3, 299.99),
    (301, 4, 299.99),
    (302, 4, 599.99),
    (303, 4, 599.99),
    (401, 5, 799.99),
    (402, 5, 799.99);


    INSERT INTO bookings ("id", "guest_id",    "room",   "check_in",   "check_out")

    VALUES
    (1, 002001, 303, '2018-01-03', '2018-01-23'),
    (2, 002001, 101, '2018-01-03', '2018-01-23'),
    (3, 002001, 102, '2018-01-03', '2018-01-23'),
    (4, 002001, 203, '2018-01-03', '2018-01-23'),
    (5, 002001, 204, '2018-01-03', '2018-01-23'),
    (6, 002001, 301, '2018-01-03', '2018-01-23'),
    (7, 002002, 201, '2018-08-01', NULL ),
    (8, 002002, 202, '2018-08-01', NULL ),
    (9, 002002, 203, '2018-08-01', NULL ),
    (10, 002002, 204, '2018-08-01', NULL ),
    (11, 002002, 205, '2018-08-01', NULL ),
    (12, 002003, 101, '1995-10-13', '1995-10-22'),
    (13, 002004, 302, '2018-08-20', NULL ),
    (14, 002004, 105, '2018-02-14', '2018-02-16'),
    (15, 002001, 204, '2018-10-03', NULL ),
    (16, 002001, 301, '2018-10-03', NULL ),
    (17, 002002, 201, '2018-09-18', NULL );


  a) A guest who exists in the database and has not booked a room.


          SELECT guests.first_name, guests.last_name
          FROM guests
          LEFT JOIN bookings ON guests.id = bookings.guest_id
          WHERE bookings.guest_id IS NULL;

      | first_name | last_name |
      | ---------- | --------- |
      | Julio      | Jones     |


  b) Bookings for a guest who has booked two rooms for the same dates.

          SELECT guests.first_name, bookings.check_in, COUNT(*) AS rooms_booked
          FROM bookings
          JOIN guests
          ON bookings.guest_id = guests.id
          GROUP BY 1, 2
          HAVING count(*) = 2;

      | first_name | check_in                 | rooms_booked |
      | ---------- | ------------------------ | ------------ |
      | Sarah      | 2018-10-03T00:00:00.000Z | 2            |

      ---

  c) Bookings for a guest who has booked one room several times on different dates.

          SELECT b1.room,
          b1.guest_id,
          b1.check_in,
          b2.check_in
          FROM	bookings b1
          INNER JOIN bookings b2
          ON b1.room = b2.room
          AND b1.guest_id = b2.guest_id
          AND b1.check_in != b2.check_in
          GROUP BY 1, 2, 3, 4
          HAVING b1.check_in < b2.check_in
          ORDER BY 1, 2;

      | room | guest_id | check_in                 | check_in                 |
      | ---- | -------- | ------------------------ | ------------------------ |
      | 201  | 2002     | 2018-08-01T00:00:00.000Z | 2018-09-18T00:00:00.000Z |
      | 204  | 2001     | 2018-01-03T00:00:00.000Z | 2018-10-03T00:00:00.000Z |
      | 301  | 2001     | 2018-01-03T00:00:00.000Z | 2018-10-03T00:00:00.000Z |


  d) The number of unique guests who have booked the same room.

            SELECT DISTINCT guests.first_name
            FROM guests
            JOIN bookings ON guests.id = bookings.guest_id
            JOIN rooms ON bookings.room = rooms.room;

        | first_name |
        | ---------- |
        | Sarah      |
        | Asher      |
        | Marty      |
        | Hungry     |


****************************************************************************************************


2) Design a data model for students and the classes they have taken. The model should include the students' grades for a given class.
   Work through the questions from the example above.

    a) Document any assumptions you make about what data should be stored, what data types should be used, etc., and include them in a text file.

    File: students.txt

       Ask questions of your mentor in your next session if you are unsure about parts of your model.


    b) Draw the model using the notation used in the checkpoint and submit a picture.
       You can also use a tool like StarUML or quickdatabasediagrams.com if you choose.


        https://app.quickdatabasediagrams.com/#/d/ifgI2A


3)Build a database for the students/classes data model.
  Create a SQL file that creates the tables and inserts sample data (the questions below will help you create the data).
  Submit queries for the following data and include the results:

  a) All students who have taken a particular class.

    SELECT s.first_name, s.last_name, c.name
    FROM students AS s
    JOIN grades  AS g
    ON  g.student_id = s.student_id
    JOIN courses AS c
    ON c.course_id = g.course_id
    WHERE c.course_id = 101;

    | first_name | last_name | name            |
    | ---------- | --------- | --------------- |
    | Pedro      | Penn      | General Studies |
    | Alex       | Tommy     | General Studies |
    | Kit        | Kat       | General Studies |
    | Hamlet     | Granger   | General Studies |

    ---

  b) The number of each grade (using letter grades A-F) earned in a particular class.

    SELECT 	c.name, g.letter_grade, count(g.letter_grade) AS grade_count
    FROM students AS s
    JOIN grades  AS g
    ON  g.student_id = s.student_id
    JOIN courses AS c
    ON c.course_id = g.course_id
    WHERE c.course_id = 102
    GROUP BY 1, 2;

    | name         | letter_grade | grade_count |
    | ------------ | ------------ | ----------- |
    | Herding Cats | A            | 2           |
    | Herding Cats | B            | 2           |


  c) Class names and the total number of students who have taken each class in the list.

        SELECT 	c.name, count(*)
        FROM courses AS c
        JOIN grades  AS g
        ON g.course_id = c.course_id
        JOIN students AS s
        ON s.student_id = g.student_id
        GROUP BY 1
        ORDER BY 2 DESC;

    | name                | count |
    | ------------------- | ----- |
    | Kindness            | 5     |
    | Herding Cats        | 4     |
    | General Studies     | 4     |
    | History             | 2     |
    | Finance             | 2     |
    | Making your bed     | 2     |
    | Dealing with Texans | 1     |
    | Math                | 1     |

    ---

  d) The class taken by the largest number of students.

    SELECT c.name, count(*)
    FROM courses AS c
    JOIN grades  AS g
    ON g.course_id = c.course_id
    JOIN students AS s
    ON s.student_id = g.student_id
    GROUP BY 1
    ORDER BY 2 DESC
    LIMIT 1;

    | name     | count |
    | -------- | ----- |
    | Kindness | 5     |

    ---
